name: ci

on:
  pull_request:
    types: [opened, synchronize, reopened]
  merge_group: {} # Required for merge queue status checks

# Global least-privilege
permissions:
  contents: read

jobs:
  ci:
    name: required-checks
    runs-on: ubuntu-latest
    # Job-scoped minimal permissions (ASVS 5.0 V12.1.1 compliance)
    # contents: read - Access repository code (required)
    # id-token: write - Generate OIDC tokens for attestations (required)  
    # attestations: write - Create SLSA provenance attestations (required)
    # packages: write - NOT GRANTED (only if attesting/pushing images)
    # pull-requests: write - NOT GRANTED (only if posting PR comments)
    # security-events: write - NOT GRANTED (only if uploading SARIF)
    permissions:
      id-token: write
      attestations: write
      contents: read
    env:
      # OTel observability guarded by repo variable
      OTEL_FEATURE_CICD: ${{ vars.OTEL_FEATURE_CICD }}
      OTEL_SERVICE_NAME: github-ci
      OTEL_RESOURCE_ATTRIBUTES: >
        ci.pipeline.name=ci,
        ci.pipeline.id=${{ github.run_id }},
        ci.pipeline.run_attempt=${{ github.run_attempt }},
        github.repository=${{ github.repository }},
        github.ref=${{ github.ref }},
        github.sha=${{ github.sha }},
        github.pr_number=${{ github.event.pull_request.number || '' }},
        git.commit.sha=${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup cosign
        uses: sigstore/cosign-installer@4959ce089c160fddf62f7166543bf9ba5f3c1e3c # v3.6.0
        with:
          cosign-release: 'latest'

      - name: Detect project type
        id: detect
        shell: bash
        run: |
          if [ -f package.json ]; then echo "type=node" >> $GITHUB_OUTPUT; fi
          if [ -f pyproject.toml ] || [ -f requirements.txt ]; then echo "type=python" >> $GITHUB_OUTPUT; fi
          if [ -f go.mod ]; then echo "type=go" >> $GITHUB_OUTPUT; fi

      - name: Install deps and run tests with coverage (>=80%)
        shell: bash
        run: |
          set -e
          case "${{ steps.detect.outputs.type }}" in
            node)
              npm ci
              npx --yes nyc --reporter=text-summary --check-coverage \
                --branches=80 --lines=80 --functions=80 --statements=80 npm test
              ;;
            python)
              python -m pip install --upgrade pip
              pip install -r requirements.txt || true
              pip install pytest pytest-cov
              pytest --maxfail=1 --disable-warnings -q \
                --cov=. --cov-report=term --cov-fail-under=80
              ;;
            go)
              go test ./... -coverprofile=coverage.out
              pct=$(go tool cover -func=coverage.out | awk '/total:/ {print int($3)}')
              if [ "$pct" -lt 80 ]; then echo "Coverage $pct% < 80%"; exit 1; fi
              ;;
            *)
              echo "No supported project detected; policy requires tests+coverage >=80%."
              exit 1
              ;;
          esac

      - name: Generate SBOM (SPDX via Syft)
        id: sbom
        uses: anchore/sbom-action@e8d2a6937ecead383dfe75190d104edd1f9c5751 # v0.16.0
        with:
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload evidence artifacts (SBOM, coverage)
        uses: actions/upload-artifact@89ef406dd8d7e03cfd12d9e0a4a378f454709029 # v4.3.5
        with:
          name: evidence-${{ github.run_id }}
          path: |
            sbom.spdx.json
            coverage.out
            **/coverage-summary.json
            **/coverage/lcov.info
          if-no-files-found: warn
          retention-days: 30

      # Produce SLSA provenance for SBOM using GitHub OIDC/attestations
      - name: Generate SLSA provenance attestation (SBOM)
        uses: actions/attest-build-provenance@210c1913531870065f03ce1f9440dd87bc0938cd # v1.4.0
        with:
          subject-path: sbom.spdx.json

      # Verify attestation (cosign) as a required check
      - name: Verify SLSA provenance attestation with cosign
        shell: bash
        run: |
          set -e
          cosign version
          # Verify attestation with proper identity verification
          cosign verify-attestation \
            --type slsaprovenance \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}.*" \
            sbom.spdx.json

      - name: Emit minimal OTel CI/CD spans (flagged)
        if: vars.OTEL_FEATURE_CICD == 'true'
        env:
          OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://otel-collector:4317' }}
        shell: bash
        run: |
          echo "OTel emission enabled via OTEL_FEATURE_CICD=true"
          echo "Minimal OTel emission with correlation data:"
          echo "  - Commit SHA: ${{ github.sha }}"
          echo "  - PR Number: ${{ github.event.pull_request.number || 'N/A' }}"
          echo "  - Run ID: ${{ github.run_id }}"
          echo "Replace this step with your org-standard OTel emission (e.g., otel-cli) targeting $OTEL_EXPORTER_OTLP_ENDPOINT."
          echo "Guarded by OTEL_FEATURE_CICD variable to allow rapid rollback."

